{"version":3,"sources":["components/Results.js","components/GameOfChance.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","fiftyFifty","Component","GameOfChance","_this","state","counter","handleClick","bind","assertThisInitialized","setState","containerStyle","width","height","marginLeft","marginTop","backgroundColor","expression","Math","random","style","onClick","components_Results","App","className","components_GameOfChance","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAeeA,cAZb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAGN,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKN,KAAKH,MAAMU,oBAPFC,aCoDPC,cAlDb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,IACjBC,EAAAZ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAW,GAAAN,KAAAH,KAAMH,KACDc,MAAQ,CACXC,QAAS,GAEXF,EAAKG,YAAcH,EAAKG,YAAYC,KAAjBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAY,KALFA,6EASjBV,KAAKgB,SAAS,CACZJ,QAASZ,KAAKW,MAAMC,QAAU,qCAKhC,IAAIK,EAAiB,CACnBC,MAAO,IACPC,OAAQ,IACRC,WAAY,MACZC,UAAW,GACXC,gBAAiB,UAGfC,EAAaC,KAAKC,SAAW,GAWjC,OATkB,GAAdF,IACFN,EAAiB,CACfC,MAAO,IACPC,OAAQ,IACRC,WAAY,MACZC,UAAW,GACXC,gBAAiB,UAInBlB,EAAAC,EAAAC,cAAA,OAAKoB,MAAOT,GACVb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQqB,QAAS3B,KAAKa,aAAtB,eACe,GAAdU,EACCnB,EAAAC,EAAAC,cAACsB,EAAD,CAASrB,WAAW,aAEpBH,EAAAC,EAAAC,cAACsB,EAAD,CAASrB,WAAW,cAEtBH,EAAAC,EAAAC,cAAA,SAAI,SAAWN,KAAKW,MAAMC,kBA5CTJ,aCWZqB,0LARX,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAACyB,EAAD,cAJUvB,cCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c457b88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.props.fiftyFifty}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\nimport Results from \"./Results\";\r\n\r\nclass GameOfChance extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 1\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({\r\n      counter: this.state.counter + 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let containerStyle = {\r\n      width: 200,\r\n      height: 200,\r\n      marginLeft: \"45%\",\r\n      marginTop: 20,\r\n      backgroundColor: \"yellow\"\r\n    };\r\n\r\n    let expression = Math.random() > 0.5;\r\n\r\n    if (expression == 1) {\r\n      containerStyle = {\r\n        width: 200,\r\n        height: 200,\r\n        marginLeft: \"45%\",\r\n        marginTop: 20,\r\n        backgroundColor: \"green\"\r\n      };\r\n    }\r\n    return (\r\n      <div style={containerStyle}>\r\n        <div>\r\n          <button onClick={this.handleClick}>Play Again!</button>\r\n          {expression == 1 ? (\r\n            <Results fiftyFifty=\"You Win!\" />\r\n          ) : (\r\n            <Results fiftyFifty=\"You Lose!\" />\r\n          )}\r\n          <p>{\"Turn: \" + this.state.counter}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOfChance;\r\n","import React, { Component } from \"react\";\nimport GameOfChance from \"./components/GameOfChance\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <GameOfChance />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}